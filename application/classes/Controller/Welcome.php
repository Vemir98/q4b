<?php defined('SYSPATH') or die('No direct script access.');
use Assetic\Asset\AssetCollection;
use Assetic\Asset\FileAsset;
use Assetic\Asset\GlobAsset;
use Assetic\Filter\LessFilter;
use Assetic\Filter\Yui;
use \Carbon\Carbon as Carbon;
class Controller_Welcome extends HDVP_Controller {

//	protected $_actions_perms = [
//		'index' => [
//			'GET' => 'update'
//		]
//	];
	public function before()
	{
		parent::before(); // TODO: Change the autogenerated stub
	}

	public function action_index()
	{
//$this->_checkPermOrFail('update');
//		$proc = new Process('C:\OpenServer\domains\constructmngr\index.php Test_Cron foo=bar');
//		var_dump($proc->getPid());

//		$proc = new Process();
//		$proc->setPid(7188);
//		var_dump($proc->status());

//		$proc = new Process();
//		$proc->setPid(7188);
//		var_dump($proc->stop());
		//var_dump(Model::factory('Queue')->add(['class' => 'test','args' => json_encode(['foo' => 'bar']),'queue' => 'my_queue']));
		//var_dump(Model::factory('Queue')->findAll());



//		$jobData = DB::select()->from('queues')->where('id','=',4)->execute()->as_array()[0];
//		$job = new QueueJob($jobData['queue'],$jobData);
//		$worker = new QueueWorker($jobData['queue']);
//		//var_dump($worker);
//		var_dump($worker->canMakeJob());
//		$worker->makeJob($job);

		//var_dump(Model::factory('Queue')->getAllQueues());
		//echo \Carbon\Carbon::now()->addSeconds(10)->timestamp;


//		$a = [
//		'name' =>'582345e8bc97420160702_110518.jpg',
//		'original_name' =>'20160702_110518.jpg',
//		'ext' =>'jpg',
//		'mime' =>'image/jpeg',
//		'path' =>'C:\OpenServer\domains\constructmngr\media/data/companies/11/standards/',
//		'token' =>'efcfb16ae55a660b413eb81165c87b625vkaet2s0mg4',
//			];
//		ORM::factory('StandardFile')->values($a)->save();
		//var_dump(Language::getCurrent());
		//echo htmlentities($_GET['a']);

//rename('001abc.png','/home/qforbnet/www/media/data/projects/14/plans/59b123be7019fאינסט סניטרית בניין 3+5 קומה 4.png');

//        set_time_limit(0);
//        $files = ORM::factory('PlanFile')->find_all();
//        $i = 0;
//        foreach ($files as $file){
//            if(!file_exists($file->fullFilePath())){
////                if(file_exists($file->name)){
////                    rename($file->name,DOCROOT.$file->path.DS.$file->name);
////                }
//                $i++;
//                echo var_dump($file->fullFilePath());
//            }
//        }
//        echo $i;

        //$file = ORM::factory('PlanFile',11924);
        //echo  $file->getImageLink();
        echo Auth::instance()->hash('0526167555');
        Auth::instance()->force_login('eldar5390@gmail.com');

	}

	public function action_css(){
	    $start = microtime(true);
        $css = new AssetCollection(array(
            new FileAsset(DOCROOT.'media/css/bootstrap.min.css'),
            new FileAsset(DOCROOT.'media/css/bootstrap-table.min.css'),
            new FileAsset(DOCROOT.'media/css/owl.carousel.css'),
            new FileAsset(DOCROOT.'media/css/jquery.mCustomScrollbar.css'),
            new FileAsset(DOCROOT.'media/css/bootstrap-datepicker3.css'),
            new FileAsset(DOCROOT.'media/css/numericonly.css'),
            new FileAsset(DOCROOT.'media/css/jquery-ui.min.css'),
            new FileAsset(DOCROOT.'media/css/bootstrap-select.min.css'),
            new FileAsset(DOCROOT.'media/css/icons.css'),
            new FileAsset(DOCROOT.'media/css/literallycanvas.css'),
            new FileAsset(DOCROOT.'media/css/style.css'),
        ),[
            new Assetic\Filter\CssMinFilter,
        ]);

        $css1 = new AssetCollection(array(
            new FileAsset(DOCROOT.'media/css/bootstrap.min.css'),
            new FileAsset(DOCROOT.'media/css/jquery.mCustomScrollbar.css'),
            new FileAsset(DOCROOT.'media/css/icons.css'),
            new FileAsset(DOCROOT.'media/css/login.css'),
        ),[
            new Assetic\Filter\CssMinFilter,
        ]);

        echo '<pre>';
        file_put_contents(DOCROOT.'media/css/styles.min.css', $css->dump());
        echo '---media/css/styles.min.css'.'------created-------'.PHP_EOL;
        file_put_contents(DOCROOT.'media/css/ls.min.css', $css1->dump());
        echo '---media/css/ls.min.css'.'------created-------'.PHP_EOL;
        echo '--------------total-time-----'.number_format((float)(microtime(true) - $start), 3, '.', '').'---------';

    }

    public function action_apidoc(){
        $generator = new HDVPApiDocGen();
        echo $generator->generate();
    }

    public function action_js(){
        $start = microtime(true);
        $js = new AssetCollection(array(
            new FileAsset(DOCROOT.'media/js/jquery-2.2.4.min.js'),
            new FileAsset(DOCROOT.'media/js/core.js'),
            new FileAsset(DOCROOT.'media/js/aes.js'),
        ),[
            new Assetic\Filter\JSMinFilter,
        ]);
        echo $js->dump();
        echo '--------------total-time-----'.number_format((float)(microtime(true) - $start), 3, '.', '').'---------';

    }

    public function action_images(){
        set_time_limit(0);

        // Turn off output buffering
        ini_set('output_buffering', 'off');
// Turn off PHP output compression
        ini_set('zlib.output_compression', false);

//Flush (send) the output buffer and turn off output buffering
        while (@ob_end_flush());

// Implicitly flush the buffer(s)
        ini_set('implicit_flush', true);
        ob_implicit_flush(true);
        echo '<pre>start optimization'.PHP_EOL.PHP_EOL;
        $files = ORM::factory('Image')->find_all();
        foreach ($files as $file){
            $pcs = DOCROOT.$file->path.DS.$file->name;
            if(! file_exists(DOCROOT.$file->path.DS.$file->name)){
                echo "ERR1 - ".$file->id.PHP_EOL;
                continue;
            }
            $ext = $file->ext;
            //['jpe','jpeg','jpg','png','tif','tiff','pdf']
            if(in_array($ext,['jpe','jpeg','jpg','png'])){
                if( $file->ext == 'jpg') continue;
                $oldName = $file->name;
                $img = new JBZoo\Image\Image(DOCROOT.$file->path.DS.$file->name);
                $fname = explode('.',$file->name);
                unset($fname[count($fname)-1]);
                $fname = implode('.',$fname).'.jpg';
                $img->saveAs(DOCROOT.$file->path.DS.$fname,50);
                $file->name = $fname;
                $file->ext = 'jpg';
                $file->mime = 'image/jpeg';
                $file->save();
                @unlink(DOCROOT.$file->path.DS.$oldName);
            }elseif($ext == 'pdf'){
                $fname = explode('.',$file->name);
                unset($fname[count($fname)-1]);
                $oldName = $file->name.'.png';
                if( ! file_exists(DOCROOT.$file->path.DS.$oldName)){
                    echo 'ERR2 - '.$file->id.PHP_EOL;
                    continue;
                }
                $img = new JBZoo\Image\Image(DOCROOT.$file->path.DS.$oldName);
                $fname = implode('.',$fname).'.jpg';
                $img->saveAs(DOCROOT.$file->path.DS.$fname,50);
                @unlink(DOCROOT.$file->path.DS.$oldName);
            }
            echo $pcs.' - processed'.PHP_EOL;
            ob_flush();
            flush();
        }
    }


    public function action_minimize_plans(){
	    set_time_limit(0);
	    echo "<pre>";
	    $planFiles = DB::query(Database::SELECT,'SELECT
  files.path,
  files.name
FROM pr_plans_files
  INNER JOIN files
    ON pr_plans_files.file_id = files.id')->execute();
	    foreach ($planFiles as $file){
	        $filename = $file['path'].'/'.$file['name'];
	        if(!strpos(strtolower($filename),'.pdf')){
	            $filepath = $filename;
            }else{
                $jpgPath = mb_substr($filename,0,mb_strlen($filename)-4).'.jpg';
                $pngPath = mb_substr($filename,0,mb_strlen($filename)-4).'.png';
                $jpePath = mb_substr($filename,0,mb_strlen($filename)-4).'.jpe';
                $filepath = '';
                if(file_exists($jpgPath)){
                    $filepath = $jpgPath;
                }elseif (file_exists($jpePath)){
                    $filepath = $jpePath;
                }elseif (file_exists($pngPath)){
                    $filepath = $pngPath;
                }else{
                    continue;
                }
            }

            if(!strlen($filepath)){
                continue;
            }else{
                $filepath = DOCROOT.$filepath;
            }
            if(file_exists(mb_substr($filepath,0,mb_strlen($filepath)-4).'-mobile'.mb_substr($filepath,-4,4))){
                continue;
            }
            echo $filepath.PHP_EOL;
            Queue::enqueue('imageForMobileMinimize','Job_Plan_ImageForMobileMinimizer',['filepath' => $filepath],\Carbon\Carbon::now()->addSeconds(30)->timestamp);
//	        $img = new JBZoo\Image\Image($filepath);
//	        $img->bestFit(4096,4096);
//            $img->saveAs(mb_substr($filepath,0,mb_strlen($filepath)-4).'-mobile'.mb_substr($filepath,-4,4));
        }
    }

//    public function action_exchange_sheet_numbers()
//    {
//        $plans = ORM::factory('PrPlan')
//            ->find_all();
//
//        foreach ($plans as $plan) {
//            $plan->sheet_number = $plan->file()->sheet_number;
//            $plan->save();
//
//            echo "<pre>";
//            print_r($plan->id);
//            echo "</pre>";
//        }
//    }

//    public function action_backup_plan_names()
//    {
//        ini_set('max_execution_time', 300);
//
//        $plans = ORM::factory('PrPlan')
//            ->where('name', '=', NULL)
//            ->find_all();
//
//        foreach ($plans as $plan) {
//            $file = $plan->file();
//
//            if($file->loaded()){
//                $name = $file->getName();
//                $plan->name = $name;
//
//                $plan->save();
//            }
//
//            echo "<pre>";
//            print_r($plan->id);
//            echo "</pre>";
//        }
//    }

//    public function action_change_project_statuses()
//    {
//        ini_set('max_execution_time', 300);
//
//        $projectId = 107;
//
//        $tasks = ORM::factory('PrTask')
//            ->where('project_id', '=', $projectId)
//            ->find_all();
//
//        foreach ($tasks as $task) {
//            $task->set('status', 'disabled')
//                ->save();
//        }
//
//        echo "<pre>";
//        print_r($projectId);
//        echo "</pre>";
//        die;
//    }

//    public function action_copy_project_tasks_to_another_project()
//    {
//        ini_set('max_execution_time', 300);
//
//        $fromProjectId = 60;
//        $toProjectId = 107;
//
//        $fromProject = ORM::factory('Project', $fromProjectId);
//
//        $fromTasks = $fromProject->tasks
//            ->where('status', '=', 'enabled') // enabled Statuses only
//            ->find_all();
//
//        try{
//            Database::instance()->begin();
//
//            foreach ($fromTasks as $fromTask) {
//                $toProject = ORM::factory('Project', $toProjectId);
//
//                $toCompanyCrafts = $toProject->company->crafts;
//
//                $fromCraft = $fromTask->crafts->order_by('id','DESC')->find();
//
//                $toTask = ORM::factory('PrTask');
//
//                $toTask->project_id = $toProjectId;
//                $toTask->name = $fromTask->name;
//                $toTask->status = $fromTask->status;
//
//                $toTask->save();
//
//                $toCompanyCrafts = $toCompanyCrafts->where('name', 'LIKE', '%'. trim($fromCraft->name) .'%')->find();
//
//                $toCraftRel = ORM::factory('PrCraftRel');
//
//                $toCraftRel->task_id = $toTask->id;
//                $toCraftRel->craft_id = $toCompanyCrafts->id;
//
//                $toCraftRel->save();
//            }
//
//            Database::instance()->commit();
//        }catch (HDVP_Exception $e){
//            Database::instance()->rollback();
//            echo "<pre>";
//            print_r($e);
//            echo "</pre>";
//            die;
//        }catch (ORM_Validation_Exception $e){
//            Database::instance()->rollback();
//            echo "<pre>";
//            print_r($e);
//            echo "</pre>";
//            die;
//        }catch(Exception $e){
//            Database::instance()->rollback();
//            echo "<pre>";
//            print_r($e);
//            echo "</pre>";
//            die;
//        }
//
//        echo "<pre>";
//        print_r($fromProjectId);
//        echo "</pre>";
//        echo "<pre>";
//        print_r($toProjectId);
//        echo "</pre>";
//        die;
//    }

    public function action_std(){
//        ini_set('memory_limit', '-1');
//        $filePath = '/home/qforbnet/www/media/data/companies/13/instructions/5f1cba0a95c3d.pdf';
//        $filePieces = explode('.',$filePath);
//        $ext = strtolower(end($filePieces));
//        $imagePath = preg_replace('~.pdf$~','.jpg',implode('.',$filePieces));
//        if($ext == 'pdf' AND !file_exists($imagePath)){
//            $converter = new PDFConverter($filePath.'[0]');
//            $converter->convertToJPG();
//            $imgPaths = $converter->getOutputFiles();
//        }
//
//        $img = new JBZoo\Image\Image($imagePath);
//        $img->bestFit(4096,4096);
//        $img->saveAs($filePath);
    }
    public function action_standards(){
	    $certs = ORM::factory('PrCertification')->find_all();
	    echo '<pre>';
	    $i = 0;
	    foreach ($certs as $cert){
	        $files = $cert->files->find_all();
	        if(count($files) AND $cert->craft_id){
	            $j = 0;
	            $desc = '';
	            foreach ($files as $file){
	                if(strpos($file->name,'.xls') || strpos($file->name,'.doc')) continue;
	                $oldPath = DOCROOT.$file->path.'/'.$file->name;
	                if(count($files) > 1){
	                    $desc = 'certificate '.++$j;
                    }else{
                        $desc = 'certificate';
                    }


	                echo $i++.'. '.$desc.' - ' .$file->name.' '.(file_exists($oldPath) ? 1 : 0).PHP_EOL;

                    $cert1 = ORM::factory('Certification');
                    $cert1->desc = $desc;
                    $cert1->cmp_craft_id = $cert->craft_id;
                    $cert1->company_id = $cert->project->company_id;
                    $cert1->project_id = $cert->project_id;
                    $cert1->created_by = $file->created_by;
                    $cert1->created_at = $file->created_at;
                    $cert1->uploaded = $file->created_at;
                    $cert1->file = $file->name;
                    $cert1->status = Enum_ApprovalStatus::Waiting;
                    @copy($oldPath,$this->certificationsPath($cert->project_id).$file->name);
                    $ext = strtolower($file->ext);
                    if($ext == 'pdf'){
                        Queue::enqueue('CertFileProcessor','Job_Certification_FileProcessor',['filePath' => $this->certificationsPath($cert->project_id).$file->name],Carbon::now()->addSeconds(15)->timestamp);

                    }
                    //$cert1->save();
                }
            }
        }
    }
    private function certificationsPath($id){
        $dir = str_replace('{id}',$id,DOCROOT.'media/data/projects/{id}/certifications/');
        if (!file_exists($dir)) {
            mkdir($dir, 0777, true);
        }
        return $dir;
    }
    public function action_copy_certifications(){
        $data = $this->post();
        $toCompanyId = $data['companyId'];
        $items = $data['items'];
        if(count($items)){
            $company = ORM::factory('Company',$toCompanyId);
            foreach ($items as $item){
                $defCraft = ORM::factory('CmpCraft',$item['craftId']);
                $cmpCraft = $company->crafts->where('name','=',$defCraft->name)->find();
                if( ! $cmpCraft->loaded()){
                    $oldCraft = ORM::factory('CmpCraft',$item['craftId']);
                    $this->_responseData['craft'] = false;
                    $newCraft = ORM::factory('CmpCraft');
                    $newCraft->company_id = $company->id;
                    $newCraft->name = $oldCraft->name;
                    $newCraft->catalog_number = $oldCraft->catalog_number;
                    $newCraft->status = $oldCraft->status;
                    $newCraft->related_id = $oldCraft->related_id;
                    $newCraft->save();
                    $cmpCraft = $newCraft;
                }
                $cert = ORM::factory('Certification');
                $cert->desc = $item['desc'];
                $cert->cmp_craft_id = $cmpCraft->id;
                $cert->company_id = $company->id;
                $cert->project_id = $data['projectId'];
                $cert->status = Enum_ApprovalStatus::Waiting;
                if($data['includeFiles'] AND !empty($item['file'])){
                    $path = explode('/',$item['file']);
                    @copy($this->certificationsPath($item['projectId']).end($path),$this->certificationsPath($data['projectId']).end($path));

                    $cert->file = end($path);
                    $cert->uploaded = time();

                    $paths = explode('.',end($path));
                    $ext = strtolower(end($paths));
                    if($ext == 'pdf'){
                        Queue::enqueue('CertFileProcessor','Job_Certification_FileProcessor',['filePath' => $this->certificationsPath($data['projectId']).end($path)],Carbon::now()->addSeconds(15)->timestamp);

                    }
                }
                $cert->save();
            }
        }
        $this->_responseData['status'] = 'success';
    }
    public function action_plans(){
//	    $file = ORM::factory('PlanFile',207072);
//die(DOCROOT.$file->path.'/'.$file->name);
//        $converter = new PDFConverter(DOCROOT.$file->path.'/'.$file->name);
//        $converter->convertToJPG();
//        $imgPaths = $converter->getOutputFiles();
//        var_dump($imgPaths);
        ini_set('memory_limit', '-1');
        $file = ORM::factory('PlanFile',233391);
        $plan = $file->getPlan();
        $floors = $plan->floors->find_all();
        if(strtolower($file->ext) != 'pdf') return;
        $jpgPath = str_ireplace('.pdf','.jpg',$file->fullFilePath());

        if(!file_exists($jpgPath)){echo "Create File ".$jpgPath;
//            $pdf = new Pdf($file->fullFilePath());
//            $pdf->setCompressionQuality(30);
//            $imgPaths = $pdf->saveAllPagesAsImages(dirname($file->fullFilePath()),UTF8::str_ireplace('.pdf','',$file->name));
            $converter = new PDFConverter($file->fullFilePath());
            $converter->convertToJPG();
            $imgPaths = $converter->getOutputFiles();
            $imgPaths = array_values($imgPaths);
            foreach ($imgPaths as $idx => $p){
                if($idx > 0){
                    $newPlan = ORM::factory('PrPlan');
                    $tmpArr = $plan->as_array();
                    unset($tmpArr['id'],$tmpArr['updated_by'],$tmpArr['approved_by']);
                    //throw new Exception(var_export($tmpArr,true));
                    $newPlan->values($tmpArr);
                    $newPlan->_setCreatedBy($plan->created_by);
                    $newPlan->_setUpdatedBy($plan->created_by);
                    $newPlan->scope = Model_PrPlan::getNewScope();
                    $newPlan->save();
                    if(count($floors)){
                        foreach ($floors as $floor){
                            $newPlan->add('floors',$floor->id);
                        }
                    }

                    $newFile = ORM::factory('PlanFile');
                    $tmpArr = $file->as_array();
                    unset($tmpArr['id']);
                    $newFile->values($tmpArr);
                    $newFile->mime = 'image/jpeg';
                    $newFile->ext = 'jpg';
                    $newFile->name = end(explode('/',$p));
                    $newFile->original_name .= ' (p-'.$idx.')';
                    $newFile->token = md5($newFile->original_name).base_convert(microtime(false), 10, 36);
                    $newFile->_setCreatedBy($plan->created_by);
                    $newFile->save();
                    $newPlan->add('files', $newFile->pk());

                }
            }

        }else{
            echo "FILE EXISTS ".$jpgPath;
        }
    }
} // End Welcome