<?php defined('SYSPATH') or die('No direct script access.');
use Assetic\Asset\AssetCollection;
use Assetic\Asset\FileAsset;
use Assetic\Asset\GlobAsset;
use Assetic\Filter\LessFilter;
use Assetic\Filter\Yui;
class Controller_Welcome extends HDVP_Controller {

//	protected $_actions_perms = [
//		'index' => [
//			'GET' => 'update'
//		]
//	];
	public function before()
	{
		parent::before(); // TODO: Change the autogenerated stub
	}

	public function action_index()
	{
//$this->_checkPermOrFail('update');
//		$proc = new Process('C:\OpenServer\domains\constructmngr\index.php Test_Cron foo=bar');
//		var_dump($proc->getPid());

//		$proc = new Process();
//		$proc->setPid(7188);
//		var_dump($proc->status());

//		$proc = new Process();
//		$proc->setPid(7188);
//		var_dump($proc->stop());
		//var_dump(Model::factory('Queue')->add(['class' => 'test','args' => json_encode(['foo' => 'bar']),'queue' => 'my_queue']));
		//var_dump(Model::factory('Queue')->findAll());



//		$jobData = DB::select()->from('queues')->where('id','=',4)->execute()->as_array()[0];
//		$job = new QueueJob($jobData['queue'],$jobData);
//		$worker = new QueueWorker($jobData['queue']);
//		//var_dump($worker);
//		var_dump($worker->canMakeJob());
//		$worker->makeJob($job);

		//var_dump(Model::factory('Queue')->getAllQueues());
		//echo \Carbon\Carbon::now()->addSeconds(10)->timestamp;


//		$a = [
//		'name' =>'582345e8bc97420160702_110518.jpg',
//		'original_name' =>'20160702_110518.jpg',
//		'ext' =>'jpg',
//		'mime' =>'image/jpeg',
//		'path' =>'C:\OpenServer\domains\constructmngr\media/data/companies/11/standards/',
//		'token' =>'efcfb16ae55a660b413eb81165c87b625vkaet2s0mg4',
//			];
//		ORM::factory('StandardFile')->values($a)->save();
		//var_dump(Language::getCurrent());
		//echo htmlentities($_GET['a']);

//rename('001abc.png','/home/qforbnet/www/media/data/projects/14/plans/59b123be7019fאינסט סניטרית בניין 3+5 קומה 4.png');

//        set_time_limit(0);
//        $files = ORM::factory('PlanFile')->find_all();
//        $i = 0;
//        foreach ($files as $file){
//            if(!file_exists($file->fullFilePath())){
////                if(file_exists($file->name)){
////                    rename($file->name,DOCROOT.$file->path.DS.$file->name);
////                }
//                $i++;
//                echo var_dump($file->fullFilePath());
//            }
//        }
//        echo $i;



	}

	public function action_css(){
	    $start = microtime(true);
        $css = new AssetCollection(array(
            new FileAsset(DOCROOT.'media/css/bootstrap.min.css'),
            new FileAsset(DOCROOT.'media/css/bootstrap-table.min.css'),
            new FileAsset(DOCROOT.'media/css/owl.carousel.css'),
            new FileAsset(DOCROOT.'media/css/jquery.mCustomScrollbar.css'),
            new FileAsset(DOCROOT.'media/css/bootstrap-datepicker3.css'),
            new FileAsset(DOCROOT.'media/css/numericonly.css'),
            new FileAsset(DOCROOT.'media/css/jquery-ui.min.css'),
            new FileAsset(DOCROOT.'media/css/bootstrap-select.min.css'),
            new FileAsset(DOCROOT.'media/css/icons.css'),
            new FileAsset(DOCROOT.'media/css/literallycanvas.css'),
            new FileAsset(DOCROOT.'media/css/style.css'),
        ),[
            new Assetic\Filter\CssMinFilter,
        ]);

        $css1 = new AssetCollection(array(
            new FileAsset(DOCROOT.'media/css/bootstrap.min.css'),
            new FileAsset(DOCROOT.'media/css/jquery.mCustomScrollbar.css'),
            new FileAsset(DOCROOT.'media/css/icons.css'),
            new FileAsset(DOCROOT.'media/css/login.css'),
        ),[
            new Assetic\Filter\CssMinFilter,
        ]);

        echo '<pre>';
        file_put_contents(DOCROOT.'media/css/styles.min.css', $css->dump());
        echo '---media/css/styles.min.css'.'------created-------'.PHP_EOL;
        file_put_contents(DOCROOT.'media/css/ls.min.css', $css1->dump());
        echo '---media/css/ls.min.css'.'------created-------'.PHP_EOL;
        echo '--------------total-time-----'.number_format((float)(microtime(true) - $start), 3, '.', '').'---------';

    }

    public function action_apidoc(){
        $generator = new HDVPApiDocGen();
        echo $generator->generate();
    }

    public function action_js(){
        $start = microtime(true);
        $js = new AssetCollection(array(
            new FileAsset(DOCROOT.'media/js/jquery-2.2.4.min.js'),
            new FileAsset(DOCROOT.'media/js/core.js'),
            new FileAsset(DOCROOT.'media/js/aes.js'),
        ),[
            new Assetic\Filter\JSMinFilter,
        ]);
        echo $js->dump();
        echo '--------------total-time-----'.number_format((float)(microtime(true) - $start), 3, '.', '').'---------';

    }

    public function action_images(){
        set_time_limit(0);

        // Turn off output buffering
        ini_set('output_buffering', 'off');
// Turn off PHP output compression
        ini_set('zlib.output_compression', false);

//Flush (send) the output buffer and turn off output buffering
        while (@ob_end_flush());

// Implicitly flush the buffer(s)
        ini_set('implicit_flush', true);
        ob_implicit_flush(true);
        echo '<pre>start optimization'.PHP_EOL.PHP_EOL;
        $files = ORM::factory('Image')->find_all();
        foreach ($files as $file){
            $pcs = DOCROOT.$file->path.DS.$file->name;
            if(! file_exists(DOCROOT.$file->path.DS.$file->name)){
                echo "ERR1 - ".$file->id.PHP_EOL;
                continue;
            }
            //['jpe','jpeg','jpg','png','tif','tiff','pdf']
            if(in_array($file->ext,['jpe','jpeg','jpg','png'])){
                if( $file->ext == 'jpg') continue;
                $oldName = $file->name;
                $img = new JBZoo\Image\Image(DOCROOT.$file->path.DS.$file->name);
                $fname = explode('.',$file->name);
                unset($fname[count($fname)-1]);
                $fname = implode('.',$fname).'.jpg';
                $img->saveAs(DOCROOT.$file->path.DS.$fname,50);
                $file->name = $fname;
                $file->ext = 'jpg';
                $file->mime = 'image/jpeg';
                $file->save();
                @unlink(DOCROOT.$file->path.DS.$oldName);
            }elseif($file->ext == 'pdf'){
                $fname = explode('.',$file->name);
                unset($fname[count($fname)-1]);
                $oldName = $file->name.'.png';
                if( ! file_exists(DOCROOT.$file->path.DS.$oldName)){
                    echo 'ERR2 - '.$file->id.PHP_EOL;
                    continue;
                }
                $img = new JBZoo\Image\Image(DOCROOT.$file->path.DS.$oldName);
                $fname = implode('.',$fname).'.jpg';
                $img->saveAs(DOCROOT.$file->path.DS.$fname,50);
                @unlink(DOCROOT.$file->path.DS.$oldName);
            }
            echo $pcs.' - processed'.PHP_EOL;
            ob_flush();
            flush();
        }
    }


    public function action_minimize_plans(){
	    set_time_limit(0);
	    $planFiles = DB::query(Database::SELECT,'SELECT
  files.path,
  files.name
FROM pr_plans_files
  INNER JOIN files
    ON pr_plans_files.file_id = files.id')->execute();
	    foreach ($planFiles as $file){
	        $filename = $file['path'].'/'.$file['name'];
	        if(!strpos(strtolower($filename),'.pdf')){
	            $filepath = $filename;
            }else{
                $jpgPath = mb_substr($filename,0,mb_strlen($filename)-4).'.jpg';
                $pngPath = mb_substr($filename,0,mb_strlen($filename)-4).'.png';
                $jpePath = mb_substr($filename,0,mb_strlen($filename)-4).'.jpe';
                $filepath = '';
                if(file_exists($jpgPath)){
                    $filepath = $jpgPath;
                }elseif (file_exists($jpePath)){
                    $filepath = $jpePath;
                }elseif (file_exists($pngPath)){
                    $filepath = $pngPath;
                }else{
                    continue;
                }
            }

            if(!strlen($filepath)){
                continue;
            }else{
                $filepath = DOCROOT.$filepath;
            }
            Queue::enqueue('imageForMobileMinimize','Job_Plan_ImageForMobileMinimizer',['filepath' => $filepath],\Carbon\Carbon::now()->addSeconds(30)->timestamp);
//	        $img = new JBZoo\Image\Image($filepath);
//	        $img->bestFit(4096,4096);
//            $img->saveAs(mb_substr($filepath,0,mb_strlen($filepath)-4).'-mobile'.mb_substr($filepath,-4,4));
        }
    }

    public function action_exchange_sheet_numbers()
    {
        $plans = ORM::factory('PrPlan')
            ->find_all();

        foreach ($plans as $plan) {
            $plan->sheet_number = $plan->file()->sheet_number;
            $plan->save();

            echo "<pre>";
            print_r($plan->id);
            echo "</pre>";
        }
    }
} // End Welcome