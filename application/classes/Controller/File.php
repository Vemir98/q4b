<?php defined('SYSPATH') OR die('No direct script access.');

/**
 * Created by PhpStorm.
 * User: SUR0
 * Date: 27.11.2016
 * Time: 20:04
 */
class Controller_File extends HDVP_Controller
{
//    protected $_actions_perms = [
//        'download_standards_file' => [
//            'GET' => 'read'
//        ]
//    ];

    public function before()
    {
        parent::before(); // TODO: Change the autogenerated stub
        if($this->_user->isGuest()){
            throw new HTTP_Exception_403('Permission denied!');
        }
    }

    public function action_download_standards_file(){
        $token = trim($this->request->param('token'));
        $companyId = (int) $this->request->param('param1');
        $standardId = (int) $this->request->param('param2');
        $standard = ORM::factory('CmpStandard',['id' => $standardId, 'company_id' => $companyId]);

        if( ! $standard->loaded()){
            throw new HTTP_Exception_404;
        }
        $file = $standard->files->where('token','=',$token)->find();

        if( ! $file->loaded() OR !file_exists($file->path.'/'.$file->name) OR !is_file($file->path.'/'.$file->name)){
            throw new HTTP_Exception_404;
        }

        // ограничиваем скорость скачивания файла в килобайтах (=> 10 kb/s)
        $downloadSpeed = 150;

        header('Cache-control: private');
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: filename='.rawurlencode($file->original_name));
        header('Content-Disposition: filename*=utf-8\'\''.rawurlencode($file->original_name));
        header("Accept-Ranges: bytes");
        $range = 0;
        $size = filesize($file->path.'/'.$file->name);
        if(isset($_SERVER['HTTP_RANGE'])) {
            list($a, $range)=explode("=",$_SERVER['HTTP_RANGE']);
            str_replace($range, "-", $range);
            $size2 = $size - 1;
            $new_length = $size - $range;
            header("HTTP/1.1 206 Partial Content");
            header("Content-Length: $new_length");
            header("Content-Range: bytes $range$size2/$size");
        } else {
            $size2=$size-1;
            header("Content-Range: bytes 0-$size2/$size");
            header("Content-Length: ".$size);
        }

        flush();
        $f = fopen($file->path.'/'.$file->name, "r");

        while(!feof($f))
        {
            echo fread($f, round( ($downloadSpeed ?: 1024 * 3) * 1024));
            flush();
            ob_flush();
            sleep(1);
        }
        fclose($f);
    }

    public function action_delete_standards_file(){
        $token = trim($this->request->param('token'));
        $companyId = (int) $this->request->param('param1');
        $standardId = (int) $this->request->param('param2');
        $standard = ORM::factory('CmpStandard',['id' => $standardId, 'company_id' => $companyId]);

        if( ! $standard->loaded()){
            throw new HTTP_Exception_404;
        }
        $file = $standard->files->where('token','=',$token)->find();

        if( ! $file->loaded() OR !file_exists($file->path.'/'.$file->name) OR !is_file($file->path.'/'.$file->name)){
            throw new HTTP_Exception_404;
        }
        $file->status = Enum_FileStatus::Deleted;
        $file->save();
    }

    public function action_delete_plans_file(){
        $token = trim($this->request->param('token'));
        $projectId = (int) $this->request->param('param1');
        $planId = (int) $this->request->param('param2');
        $plan = ORM::factory('PrPlan',['id' => $planId, 'project_id' => $projectId]);

        if( ! $plan->loaded()){
            throw new HTTP_Exception_404;
        }
        $file = $plan->files->where('token','=',$token)->find();

        if( ! $file->loaded() OR !file_exists($file->path.'/'.$file->name) OR !is_file($file->path.'/'.$file->name)){
            throw new HTTP_Exception_404;
        }
        $file->status = Enum_FileStatus::Deleted;
        $file->save();
    }


    public function action_download_certification_file(){
        $token = trim($this->request->param('token'));
        $projectId = (int) $this->request->param('param1');
       $certId = (int) $this->request->param('param2');
       $cert = ORM::factory('PrCertification',['id' =>$certId, 'project_id' => $projectId]);

        if( !$cert->loaded()){
            throw new HTTP_Exception_404;
        }
        $file =$cert->files->where('token','=',$token)->find();

        if( ! $file->loaded() OR !file_exists($file->path.'/'.$file->name) OR !is_file($file->path.'/'.$file->name)){
            throw new HTTP_Exception_404;
        }

        // ограничиваем скорость скачивания файла в килобайтах (=> 10 kb/s)
        $downloadSpeed = 150;

        header('Cache-control: private');
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: filename='.rawurlencode($file->original_name));
        header('Content-Disposition: filename*=utf-8\'\''.rawurlencode($file->original_name));
        header("Accept-Ranges: bytes");
        $range = 0;
        $size = filesize($file->path.'/'.$file->name);
        if(isset($_SERVER['HTTP_RANGE'])) {
            list($a, $range)=explode("=",$_SERVER['HTTP_RANGE']);
            str_replace($range, "-", $range);
            $size2 = $size - 1;
            $new_length = $size - $range;
            header("HTTP/1.1 206 Partial Content");
            header("Content-Length: $new_length");
            header("Content-Range: bytes $range$size2/$size");
        } else {
            $size2=$size-1;
            header("Content-Range: bytes 0-$size2/$size");
            header("Content-Length: ".$size);
        }

        flush();
        $f = fopen($file->path.'/'.$file->name, "r");

        while(!feof($f))
        {
            echo fread($f, round( ($downloadSpeed ?: 1024 * 3) * 1024));
            flush();
            ob_flush();
            sleep(1);
        }
        fclose($f);
    }

    public function action_delete_certification_file(){
        $token = trim($this->request->param('token'));
        $projectId = (int) $this->request->param('param1');
       $certId = (int) $this->request->param('param2');
       $cert = ORM::factory('PrCertification',['id' =>$certId, 'project_id' => $projectId]);

        if( !$cert->loaded()){
            throw new HTTP_Exception_404;
        }
        $file =$cert->files->where('token','=',$token)->find();

        if( ! $file->loaded() OR !file_exists($file->path.'/'.$file->name) OR !is_file($file->path.'/'.$file->name)){
            throw new HTTP_Exception_404;
        }
        $file->status = Enum_FileStatus::Deleted;
        $file->save();
    }

    public function action_delete_quality_control_file(){
        $token = trim($this->request->param('token'));
        $projectId = (int) $this->request->param('param1');
        $qcId = (int) $this->request->param('param2');
        $qc = ORM::factory('QualityControl',['id' =>$qcId, 'project_id' => $projectId]);

        if( !$qc->loaded()){
            throw new HTTP_Exception_404;
        }
        $file =$qc->images->where('token','=',$token)->find();

        if( ! $file->loaded() OR !file_exists($file->path.'/'.$file->name) OR !is_file($file->path.'/'.$file->name)){
            throw new HTTP_Exception_404;
        }
        $file->status = Enum_FileStatus::Deleted;
        $file->save();
    }
}