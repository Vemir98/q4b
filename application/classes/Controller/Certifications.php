<?php defined('SYSPATH') or die('No direct script access.');
use \Carbon\Carbon as Carbon;
class Controller_Certifications extends HDVP_Controller_Template {

    protected $_csrfCheck = false;
    protected $_formSecureTknCheck = false;
    public $auto_render = false;
    const REGULATIONS_PATH = DOCROOT.'media/data/regulations/';
    const INSTRUCTIONS_PATH = DOCROOT.'media/data/companies/{id}/instructions/';
    const CERTIFICATIONS_PATH = DOCROOT.'media/data/projects/{id}/certifications/';
	public function before()
	{
		parent::before(); // TODO: Change the autogenerated stub
	}

	public function action_index()
	{

	}

    public function action_save_regulations(){
        $files = [];
        if(!empty($this->files())){
            $data = $this->post();
            $files = $this->files()['files'];
        }else{
            $data = JSON::decode(Arr::get($_POST,'Data'));
        }
        if(empty($data)) return;
        $i = 1;
        foreach ($data as $d){
            if(strpos($d['id'],'_') === false){ //edit
                if(!isset($d['status']['val'])) continue;
                $item = ORM::factory('Certification',$d['id']);
            }else{//new
                $item = ORM::factory('Certification');
            }

            $item->desc = $d['desc'];
            $item->status = $d['status']['val'];
            $item->craft_id = $d['craftId'];
            if(!empty($files) AND !empty($files[$d['id']])){
                $filepath = Upload::save($files[$d['id']],null,self::REGULATIONS_PATH);
                $item->file = str_replace(self::REGULATIONS_PATH . DS,'',$filepath);
                $item->uploaded = time();
                Queue::enqueue('CertFileProcessor','Job_Certification_FileProcessor',['filePath' => $filepath],Carbon::now()->addSeconds(5*$i)->timestamp);
                $i++;
            }
            $item->save();


        }

        $this->_responseData['status'] = 'success';
    }

    public function action_delete_regulation(){
	    $id = Arr::get($this->post(),'id');
        $item = ORM::factory('Certification',$id);
        if($item->uploaded){
            @unlink(self::REGULATIONS_PATH . DS . $item->file);
            $paths = explode('.',$item->file);
            $ext = strtolower(end($paths));
            if($ext == 'pdf'){
                @unlink(self::REGULATIONS_PATH . DS . str_replace('.pdf','.jpg',$item->file));
            }
        }
        $item->delete();
        $this->_responseData['status'] = 'success';
    }

    public function action_save_instructions(){
        $files = [];
        if(!empty($this->files())){
            $data = $this->post();
            $files = $this->files()['files'];
        }else{
            $data = JSON::decode(Arr::get($_POST,'Data'));
        }
        if(empty($data)) return;
        $i=1;
        foreach ($data as $d){
            if(strpos($d['id'],'_') === false){ //edit
                if(!isset($d['status']['val'])) continue;
                $item = ORM::factory('Certification',$d['id']);
            }else{//new
                $item = ORM::factory('Certification');
            }

            $item->desc = $d['desc'];
            $item->status = $d['status']['val'];
            $item->cmp_craft_id = $d['craftId'];
            $item->company_id = $d['companyId'];
            if(!empty($files) AND !empty($files[$d['id']])){
                $filepath = Upload::save($files[$d['id']],null,$this->instructionsPath($d['companyId']));
                $item->file = str_replace($this->instructionsPath($d['companyId']) . DS,'',$filepath);
                $item->uploaded = time();
                Queue::enqueue('CertFileProcessor','Job_Certification_FileProcessor',['filePath' => $filepath],Carbon::now()->addSeconds(5*$i)->timestamp);
                $i++;
            }
            $item->save();
        }

        $this->_responseData['status'] = 'success';
    }

    public function action_delete_instructions(){
        $id = Arr::get($this->post(),'id');
        $item = ORM::factory('Certification',$id);
        if($item->uploaded){
            @unlink($this->instructionsPath($id) . DS . $item->file);
            $paths = explode('.',$item->file);
            $ext = strtolower(end($paths));
            if($ext == 'pdf'){
                @unlink($this->instructionsPath($id) . DS . str_replace('.pdf','.jpg',$item->file));
            }
        }
        $item->delete();
        $this->_responseData['status'] = 'success';
    }

    public function action_copy_instructions(){
        $data = $this->post();
        $toCompanyId = $data['companyId'];
        $items = $data['items'];
        if(count($items)){
            $company = ORM::factory('Company',$toCompanyId);
            foreach ($items as $item){
                $defCraft = ORM::factory('CmpCraft',$item['craftId']);
                $cmpCraft = $company->crafts->where('name','=',$defCraft->name)->find();
                if( ! $cmpCraft->loaded()){
                    $oldCraft = ORM::factory('CmpCraft',$item['craftId']);
                    $this->_responseData['craft'] = false;
                    $newCraft = ORM::factory('CmpCraft');
                    $newCraft->company_id = $company->id;
                    $newCraft->name = $oldCraft->name;
                    $newCraft->catalog_number = $oldCraft->catalog_number;
                    $newCraft->status = $oldCraft->status;
                    $newCraft->related_id = $oldCraft->related_id;
                    $newCraft->save();
                    $cmpCraft = $newCraft;
                }
                $cert = ORM::factory('Certification');
                $cert->desc = $item['desc'];
                $cert->cmp_craft_id = $cmpCraft->id;
                $cert->company_id = $company->id;
                $cert->status = Enum_CertificationsApprovalStatus::Waiting;
                $cert->save();
            }
        }
        $this->_responseData['status'] = 'success';
    }

    public function action_save_certifications(){
        $files = [];
        if(!empty($this->files())){
            $data = $this->post();
            $files = $this->files()['files'];
        }else{
            $data = JSON::decode(Arr::get($_POST,'Data'));
        }
        if(empty($data)) return;
        $i=1;
        foreach ($data as $d){
            if(strpos($d['id'],'_') === false){ //edit
                if(!isset($d['status']['val'])) continue;
                $item = ORM::factory('Certification',$d['id']);
            }else{//new
                $item = ORM::factory('Certification');
            }

            $item->desc = $d['desc'];
            $item->status = $d['status']['val'];
            $item->cmp_craft_id = $d['craftId'];
            $item->company_id = $d['companyId'];
            $item->project_id = $d['projectId'];
            if(!empty($files) AND !empty($files[$d['id']])){
                $filepath = Upload::save($files[$d['id']],null,$this->certificationsPath($d['projectId']));
                $item->file = str_replace($this->certificationsPath($d['projectId']) . DS,'',$filepath);
                $item->uploaded = time();
                Queue::enqueue('CertFileProcessor','Job_Certification_FileProcessor',['filePath' => $filepath],Carbon::now()->addSeconds(5*$i)->timestamp);
                $i++;
            }
            $item->save();
        }

        $this->_responseData['status'] = 'success';
    }

    public function action_delete_certifications(){
        $id = Arr::get($this->post(),'id');
        $item = ORM::factory('Certification',$id);
        if($item->uploaded){
            @unlink($this->certificationsPath($id) . DS . $item->file);
            $paths = explode('.',$item->file);
            $ext = strtolower(end($paths));
            if($ext == 'pdf'){
                @unlink($this->certificationsPath($id) . DS . str_replace('.pdf','.jpg',$item->file));
            }
        }
        $item->delete();
        $this->_responseData['status'] = 'success';
    }

    public function action_copy_certifications(){
        $data = $this->post();
        $toCompanyId = $data['companyId'];
        $items = $data['items'];
        if(count($items)){
            $company = ORM::factory('Company',$toCompanyId);
            foreach ($items as $item){
                $defCraft = ORM::factory('CmpCraft',$item['craftId']);
                $cmpCraft = $company->crafts->where('name','=',$defCraft->name)->find();
                if( ! $cmpCraft->loaded()){
                    $oldCraft = ORM::factory('CmpCraft',$item['craftId']);
                    $this->_responseData['craft'] = false;
                    $newCraft = ORM::factory('CmpCraft');
                    $newCraft->company_id = $company->id;
                    $newCraft->name = $oldCraft->name;
                    $newCraft->catalog_number = $oldCraft->catalog_number;
                    $newCraft->status = $oldCraft->status;
                    $newCraft->related_id = $oldCraft->related_id;
                    $newCraft->save();
                    $cmpCraft = $newCraft;
                }
                $cert = ORM::factory('Certification');
                $cert->desc = $item['desc'];
                $cert->cmp_craft_id = $cmpCraft->id;
                $cert->company_id = $company->id;
                $cert->project_id = $data['projectId'];
                $cert->status = Enum_CertificationsApprovalStatus::Waiting;
                if($data['includeFiles'] AND !empty($item['file'])){
                    $path = explode('/',$item['file']);
                    @copy($this->certificationsPath($item['projectId']).end($path),$this->certificationsPath($data['projectId']).end($path));

                    $cert->file = end($path);
                    $cert->uploaded = time();

                    $paths = explode('.',end($path));
                    $ext = strtolower(end($paths));
                    if($ext == 'pdf'){
                        Queue::enqueue('CertFileProcessor','Job_Certification_FileProcessor',['filePath' => $this->certificationsPath($data['projectId']).end($path)],Carbon::now()->addSeconds(15)->timestamp);

                    }
                }
                $cert->save();
            }
        }
        $this->_responseData['status'] = 'success';
    }

    private function instructionsPath($id){
	    $dir = str_replace('{id}',$id,self::INSTRUCTIONS_PATH);
        if (!file_exists($dir)) {
            mkdir($dir, 0777, true);
        }
        return $dir;
    }

    private function certificationsPath($id){
        $dir = str_replace('{id}',$id,self::CERTIFICATIONS_PATH);
        if (!file_exists($dir)) {
            mkdir($dir, 0777, true);
        }
        return $dir;
    }
}